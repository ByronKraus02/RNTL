import { useState } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Loader2, User, CreditCard } from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

export default function Settings() {
  const queryClient = useQueryClient();
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState(null);

  const { data: user, isLoading } = useQuery({
    queryKey: ['currentUser'],
    queryFn: () => base44.auth.me(),
  });

  const [profileData, setProfileData] = useState({
    full_name: user?.full_name || "",
    phone_number: user?.phone_number || "",
  });

  const [bankingData, setBankingData] = useState({
    bank_name: user?.bank_name || "",
    account_holder_name: user?.account_holder_name || "",
    account_number: user?.account_number || "",
    branch_code: user?.branch_code || "",
    account_type: user?.account_type || "cheque",
  });

  const updateProfileMutation = useMutation({
    mutationFn: (data) => base44.auth.updateMe(data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['currentUser'] });
      setSuccess(true);
      setTimeout(() => setSuccess(false), 3000);
    },
    onError: (error) => {
      setError("Failed to update profile. Please try again.");
      setTimeout(() => setError(null), 3000);
    },
  });

  const handleProfileSubmit = (e) => {
    e.preventDefault();
    updateProfileMutation.mutate(profileData);
  };

  const handleBankingSubmit = (e) => {
    e.preventDefault();
    updateProfileMutation.mutate(bankingData);
  };

  if (!user) {
    return (
      <div className="max-w-4xl mx-auto px-6 py-16 text-center bg-black min-h-screen">
        <h2 className="text-2xl font-bold mb-4 text-white">Please login to access settings</h2>
        <Button
          onClick={() => base44.auth.redirectToLogin()}
          className="bg-cyan-400 text-black hover:bg-cyan-300"
        >
          Login
        </Button>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto px-6 py-8 bg-black min-h-screen">
      <div className="mb-8">
        <h1 className="text-3xl md:text-4xl font-bold text-white mb-2">
          Settings
        </h1>
        <p className="text-gray-400">
          Manage your profile and banking information
        </p>
      </div>

      {success && (
        <Alert className="mb-6 bg-green-900/50 border-green-600">
          <AlertDescription className="text-green-300">
            âœ… Settings updated successfully!
          </AlertDescription>
        </Alert>
      )}

      {error && (
        <Alert variant="destructive" className="mb-6">
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      <Tabs defaultValue="profile" className="space-y-6">
        <TabsList className="grid w-full grid-cols-2 bg-gray-900 border border-gray-800">
          <TabsTrigger
            value="profile"
            className="data-[state=active]:bg-cyan-400 data-[state=active]:text-black text-gray-400"
          >
            <User className="w-4 h-4 mr-2" />
            Profile
          </TabsTrigger>
          <TabsTrigger
            value="banking"
            className="data-[state=active]:bg-cyan-400 data-[state=active]:text-black text-gray-400"
          >
            <CreditCard className="w-4 h-4 mr-2" />
            Banking
          </TabsTrigger>
        </TabsList>

        <TabsContent value="profile">
          <Card className="shadow-lg border-0 bg-gray-900 rounded-3xl">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-white">
                <User className="w-5 h-5" />
                Profile Information
              </CardTitle>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleProfileSubmit} className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="full_name" className="text-white">Full Name</Label>
                  <Input
                    id="full_name"
                    placeholder="Your full name"
                    value={profileData.full_name}
                    onChange={(e) => setProfileData(prev => ({ ...prev, full_name: e.target.value }))}
                    className="bg-gray-800 border-gray-700 text-white"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="email" className="text-white">Email</Label>
                  <Input
                    id="email"
                    value={user.email}
                    disabled
                    className="bg-gray-800 border-gray-700 text-gray-500"
                  />
                  <p className="text-xs text-gray-500">Email cannot be changed</p>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="phone_number" className="text-white">Phone Number</Label>
                  <Input
                    id="phone_number"
                    placeholder="e.g., 082 123 4567"
                    value={profileData.phone_number}
                    onChange={(e) => setProfileData(prev => ({ ...prev, phone_number: e.target.value }))}
                    className="bg-gray-800 border-gray-700 text-white"
                  />
                </div>

                <Button
                  type="submit"
                  className="w-full bg-cyan-400 text-black hover:bg-cyan-300 font-bold py-6 text-lg rounded-full"
                  disabled={updateProfileMutation.isPending}
                >
                  {updateProfileMutation.isPending ? (
                    <>
                      <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                      Updating...
                    </>
                  ) : (
                    'Save Profile'
                  )}
                </Button>
              </form>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="banking">
          <Card className="shadow-lg border-0 bg-gray-900 rounded-3xl">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-white">
                <CreditCard className="w-5 h-5" />
                Banking Details
              </CardTitle>
              <p className="text-sm text-gray-400 mt-2">
                Add your banking details to receive payments from rentals
              </p>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleBankingSubmit} className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="bank_name" className="text-white">Bank Name</Label>
                  <Select
                    value={bankingData.bank_name}
                    onValueChange={(value) => setBankingData(prev => ({ ...prev, bank_name: value }))}
                  >
                    <SelectTrigger className="bg-gray-800 border-gray-700 text-white">
                      <SelectValue placeholder="Select your bank" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="ABSA">ABSA</SelectItem>
                      <SelectItem value="Standard Bank">Standard Bank</SelectItem>
                      <SelectItem value="FNB">FNB</SelectItem>
                      <SelectItem value="Nedbank">Nedbank</SelectItem>
                      <SelectItem value="Capitec">Capitec</SelectItem>
                      <SelectItem value="Investec">Investec</SelectItem>
                      <SelectItem value="Discovery Bank">Discovery Bank</SelectItem>
                      <SelectItem value="TymeBank">TymeBank</SelectItem>
                      <SelectItem value="African Bank">African Bank</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="account_holder_name" className="text-white">Account Holder Name</Label>
                  <Input
                    id="account_holder_name"
                    placeholder="Name on account"
                    value={bankingData.account_holder_name}
                    onChange={(e) => setBankingData(prev => ({ ...prev, account_holder_name: e.target.value }))}
                    className="bg-gray-800 border-gray-700 text-white"
                  />
                </div>

                <div className="grid md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="account_number" className="text-white">Account Number</Label>
                    <Input
                      id="account_number"
                      placeholder="Account number"
                      value={bankingData.account_number}
                      onChange={(e) => setBankingData(prev => ({ ...prev, account_number: e.target.value }))}
                      className="bg-gray-800 border-gray-700 text-white"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="branch_code" className="text-white">Branch Code</Label>
                    <Input
                      id="branch_code"
                      placeholder="Branch code"
                      value={bankingData.branch_code}
                      onChange={(e) => setBankingData(prev => ({ ...prev, branch_code: e.target.value }))}
                      className="bg-gray-800 border-gray-700 text-white"
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="account_type" className="text-white">Account Type</Label>
                  <Select
                    value={bankingData.account_type}
                    onValueChange={(value) => setBankingData(prev => ({ ...prev, account_type: value }))}
                  >
                    <SelectTrigger className="bg-gray-800 border-gray-700 text-white">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="cheque">Cheque Account</SelectItem>
                      <SelectItem value="savings">Savings Account</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <Button
                  type="submit"
                  className="w-full bg-cyan-400 text-black hover:bg-cyan-300 font-bold py-6 text-lg rounded-full"
                  disabled={updateProfileMutation.isPending}
                >
                  {updateProfileMutation.isPending ? (
                    <>
                      <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                      Updating...
                    </>
                  ) : (
                    'Save Banking Details'
                  )}
                </Button>
              </form>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
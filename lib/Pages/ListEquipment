import { useState, useEffect } from "react";
import axios from "axios";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Upload, Plus, Loader2 } from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";

const STELLENBOSCH_LOCATIONS = [
  "Stellenbosch Central, Bird Street, Stellenbosch, 7600",
  "Die Boord, Merriman Avenue, Stellenbosch, 7600",
  "Stellenbosch University, Victoria Street, Stellenbosch, 7600",
  "Paradyskloof, Bottelary Road, Stellenbosch, 7600",
  "Technopark, Techno Avenue, Stellenbosch, 7600",
  "Kayamandi, Kayamandi, Stellenbosch, 7600",
  "Dalsig, Dalsig Road, Stellenbosch, 7600",
  "Cloetesville, Cloetesville, Stellenbosch, 7600",
  "Idas Valley, Idas Valley, Stellenbosch, 7600",
  "Jamestown, Jamestown, Stellenbosch, 7600",
  "La Colline, La Colline Road, Stellenbosch, 7600",
  "Mostertsdrift, Mostertsdrift, Stellenbosch, 7600",
];

export default function ListEquipment() {
  const navigate = useNavigate();
  const queryClient = useQueryClient();

  const [formData, setFormData] = useState({
    name: "",
    description: "",
    category: "",
    price_per_day: "",
    location: "",
    address: "",
    contact_number: "",
    condition: "good",
    image_url: "",
    status: "available",
  });

  const [uploading, setUploading] = useState(false);
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState(null);

  // ✅ Get current user (replace with your own auth logic)
  const { data: user } = useQuery({
    queryKey: ["currentUser"],
    queryFn: async () => {
      const res = await axios.get("/api/auth/me"); // e.g., returns { id, name, email }
      return res.data;
    },
  });

  // ✅ Create equipment mutation
  const createEquipmentMutation = useMutation({
    mutationFn: async (equipmentData) => {
      const res = await axios.post("/api/equipment", equipmentData);
      return res.data;
    },
    onSuccess: (data) => {
      setSuccess(true);
      setFormData({
        name: "",
        description: "",
        category: "",
        price_per_day: "",
        location: "",
        address: "",
        contact_number: "",
        condition: "good",
        image_url: "",
        status: "available",
      });
      queryClient.invalidateQueries({ queryKey: ["equipment"] });
      setTimeout(() => {
        navigate(createPageUrl("EquipmentDetails") + `?id=${data.id}`);
      }, 1000);
    },
    onError: () => {
      setError("Failed to list equipment. Please try again.");
    },
  });

  // ✅ Handle file upload to your backend or a service like Cloudinary
  const handleImageUpload = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    setUploading(true);
    try {
      const formData = new FormData();
      formData.append("file", file);

      const res = await axios.post("/api/upload", formData, {
        headers: { "Content-Type": "multipart/form-data" },
      });

      setFormData((prev) => ({ ...prev, image_url: res.data.file_url }));
    } catch (err) {
      setError("Failed to upload image. Please try again.");
    } finally {
      setUploading(false);
    }
  };

  const handleAddressSelect = (address) => {
    const location = address.split(",")[0];
    setFormData((prev) => ({ ...prev, address, location }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    setError(null);

    if (!formData.name || !formData.category || !formData.price_per_day || !formData.location) {
      setError("Please fill in all required fields");
      return;
    }

    createEquipmentMutation.mutate(formData);
  };

  if (!user) {
    return (
      <div className="max-w-2xl mx-auto px-6 py-16 text-center bg-black min-h-screen">
        <h2 className="text-2xl font-bold mb-4 text-white">Please login to list equipment</h2>
        <Button
          onClick={() => (window.location.href = "/login")}
          className="bg-cyan-400 text-black hover:bg-cyan-300"
        >
          Login
        </Button>
      </div>
    );
  }

  return (
    <div className="max-w-3xl mx-auto px-6 py-8 bg-black min-h-screen">
      <div className="mb-8">
        <h1 className="text-3xl md:text-4xl font-bold text-white mb-2">
          List Your Equipment
        </h1>
        <p className="text-gray-400">
          Share your music equipment with the Stellenbosch community and earn money
        </p>
      </div>

      {success && (
        <Alert className="mb-6 bg-green-900/50 border-green-600">
          <AlertDescription className="text-green-300">
            ✅ Equipment listed successfully! Redirecting...
          </AlertDescription>
        </Alert>
      )}

      {error && (
        <Alert variant="destructive" className="mb-6">
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      <Card className="shadow-lg border-0 bg-gray-900 rounded-3xl">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-white">
            <Plus className="w-5 h-5" />
            Equipment Details
          </CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="name" className="text-white">Equipment Name *</Label>
              <Input
                id="name"
                placeholder="e.g., JBL EON615 Powered Speaker"
                value={formData.name}
                onChange={(e) => setFormData((prev) => ({ ...prev, name: e.target.value }))}
                required
                className="bg-gray-800 border-gray-700 text-white"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="description" className="text-white">Description</Label>
              <Textarea
                id="description"
                placeholder="Describe your equipment..."
                value={formData.description}
                onChange={(e) => setFormData((prev) => ({ ...prev, description: e.target.value }))}
                rows={4}
                className="bg-gray-800 border-gray-700 text-white"
              />
            </div>

            <div className="grid md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="category" className="text-white">Category *</Label>
                <Select
                  value={formData.category}
                  onValueChange={(value) => setFormData((prev) => ({ ...prev, category: value }))}
                >
                  <SelectTrigger className="bg-gray-800 border-gray-700 text-white">
                    <SelectValue placeholder="Select category" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="speakers">Speakers</SelectItem>
                    <SelectItem value="dj_equipment">DJ Equipment</SelectItem>
                    <SelectItem value="microphones">Microphones</SelectItem>
                    <SelectItem value="lighting">Lighting</SelectItem>
                    <SelectItem value="instruments">Instruments</SelectItem>
                    <SelectItem value="amplifiers">Amplifiers</SelectItem>
                    <SelectItem value="mixers">Mixers</SelectItem>
                    <SelectItem value="other">Other</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="condition" className="text-white">Condition</Label>
                <Select
                  value={formData.condition}
                  onValueChange={(value) => setFormData((prev) => ({ ...prev, condition: value }))}
                >
                  <SelectTrigger className="bg-gray-800 border-gray-700 text-white">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="excellent">Excellent</SelectItem>
                    <SelectItem value="good">Good</SelectItem>
                    <SelectItem value="fair">Fair</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="price" className="text-white">Daily Rental Price (ZAR) *</Label>
              <Input
                id="price"
                type="number"
                placeholder="e.g., 250"
                value={formData.price_per_day}
                onChange={(e) => setFormData((prev) => ({ ...prev, price_per_day: e.target.value }))}
                required
                className="bg-gray-800 border-gray-700 text-white"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="address" className="text-white">Pickup Address *</Label>
              <Select
                value={formData.address}
                onValueChange={handleAddressSelect}
              >
                <SelectTrigger className="bg-gray-800 border-gray-700 text-white">
                  <SelectValue placeholder="Select your location" />
                </SelectTrigger>
                <SelectContent>
                  {STELLENBOSCH_LOCATIONS.map((loc) => (
                    <SelectItem key={loc} value={loc}>{loc}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="contact" className="text-white">Contact Number</Label>
              <Input
                id="contact"
                placeholder="e.g., 082 123 4567"
                value={formData.contact_number}
                onChange={(e) => setFormData((prev) => ({ ...prev, contact_number: e.target.value }))}
                className="bg-gray-800 border-gray-700 text-white"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="image" className="text-white">Equipment Image</Label>
              <div className="flex gap-4 items-center">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => document.getElementById("image-upload").click()}
                  disabled={uploading}
                  className="border-2 border-cyan-400 hover:bg-cyan-400 text-white hover:text-black"
                >
                  {uploading ? (
                    <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      Uploading...
                    </>
                  ) : (
                    <>
                      <Upload className="w-4 h-4 mr-2" />
                      Upload Image
                    </>
                  )}
                </Button>
                <input
                  id="image-upload"
                  type="file"
                  accept="image/*"
                  onChange={handleImageUpload}
                  className="hidden"
                />
                {formData.image_url && (
                  <span className="text-sm text-green-400">✓ Image uploaded</span>
                )}
              </div>
              {formData.image_url && (
                <img
                  src={formData.image_url}
                  alt="Preview"
                  className="w-full h-48 object-cover rounded-lg mt-4"
                />
              )}
            </div>

            <Button
              type="submit"
              className="w-full bg-cyan-400 text-black hover:bg-cyan-300 font-bold py-6 text-lg rounded-full"
              disabled={createEquipmentMutation.isPending}
            >
              {createEquipmentMutation.isPending ? (
                <>
                  <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                  Listing Equipment...
                </>
              ) : (
                <>
                  <Plus className="w-5 h-5 mr-2" />
                  List Equipment
                </>
              )}
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}

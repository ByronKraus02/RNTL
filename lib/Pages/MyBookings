
import { base44 } from "@/api/base44Client";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Calendar, MapPin, DollarSign, CheckCircle, XCircle, Package } from "lucide-react";
import { format } from "date-fns";
import { Skeleton } from "@/components/ui/skeleton";
import { createPageUrl } from "@/utils";

export default function MyBookings() {
  const queryClient = useQueryClient();

  const { data: user } = useQuery({
    queryKey: ['currentUser'],
    queryFn: () => base44.auth.me(),
  });

  const { data: bookings, isLoading } = useQuery({
    queryKey: ['bookings', user?.email],
    queryFn: () => base44.entities.Booking.list('-created_date'),
    initialData: [],
    enabled: !!user,
  });

  const updateBookingMutation = useMutation({
    mutationFn: ({ id, data }) => base44.entities.Booking.update(id, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['bookings'] });
    },
  });

  const myRentals = bookings.filter(b => b.renter_email === user?.email);
  const myListings = bookings.filter(b => b.owner_email === user?.email);

  const statusColors = {
    pending: "bg-yellow-100 text-yellow-800",
    confirmed: "bg-blue-100 text-blue-800",
    picked_up: "bg-purple-100 text-purple-800",
    returned: "bg-green-100 text-green-800",
    cancelled: "bg-red-100 text-red-800",
  };

  const paymentColors = {
    held_in_escrow: "bg-orange-100 text-orange-800",
    released_to_owner: "bg-green-100 text-green-800",
    refunded: "bg-gray-100 text-gray-800",
  };

  const handleStatusUpdate = (bookingId, newStatus) => {
    let paymentStatus = 'held_in_escrow';
    if (newStatus === 'returned') {
      paymentStatus = 'released_to_owner';
    } else if (newStatus === 'cancelled') {
      paymentStatus = 'refunded';
    }

    updateBookingMutation.mutate({
      id: bookingId,
      data: { status: newStatus, payment_status: paymentStatus }
    });
  };

  if (!user) {
    return (
      <div className="max-w-4xl mx-auto px-6 py-16 text-center bg-black min-h-screen">
        <h2 className="text-2xl font-bold mb-4 text-white">Please login to view your bookings</h2>
        <Button
          onClick={() => base44.auth.redirectToLogin()}
          className="bg-cyan-400 text-black hover:bg-cyan-300"
        >
          Login
        </Button>
      </div>
    );
  }

  const BookingCard = ({ booking, isOwner }) => (
    <Card className="overflow-hidden hover:shadow-lg transition-shadow border-2 border-red-200">
      <CardHeader className="bg-gradient-to-r from-red-50 to-blue-50">
        <div className="flex justify-between items-start">
          <div>
            <CardTitle className="text-xl mb-2">{booking.equipment_name}</CardTitle>
            <div className="flex gap-2 flex-wrap">
              <Badge className={statusColors[booking.status]}>
                {booking.status?.replace(/_/g, ' ')}
              </Badge>
              <Badge className={paymentColors[booking.payment_status]}>
                üí∞ {booking.payment_status?.replace(/_/g, ' ')}
              </Badge>
            </div>
          </div>
          <div className="text-right">
            <div className="text-2xl font-bold text-red-600">
              R{booking.total_amount}
            </div>
            <div className="text-sm text-gray-600">{booking.total_days} days</div>
          </div>
        </div>
      </CardHeader>
      <CardContent className="p-6 space-y-4">
        <div className="grid md:grid-cols-2 gap-4">
          <div className="flex items-start gap-2">
            <Calendar className="w-5 h-5 text-red-600 mt-0.5" />
            <div>
              <p className="text-sm text-gray-600">Rental Period</p>
              <p className="font-semibold">
                {format(new Date(booking.start_date), "MMM d, yyyy")} - {format(new Date(booking.end_date), "MMM d, yyyy")}
              </p>
            </div>
          </div>

          <div className="flex items-start gap-2">
            <MapPin className="w-5 h-5 text-red-600 mt-0.5" />
            <div>
              <p className="text-sm text-gray-600">Pickup Location</p>
              <p className="font-semibold">{booking.pickup_location}</p>
              {booking.pickup_address && (
                <p className="text-sm text-gray-600">{booking.pickup_address}</p>
              )}
            </div>
          </div>

          <div className="flex items-start gap-2">
            <Package className="w-5 h-5 text-red-600 mt-0.5" />
            <div>
              <p className="text-sm text-gray-600">{isOwner ? 'Renter' : 'Owner'}</p>
              <p className="font-semibold">
                {isOwner ? booking.renter_name : 'Contact via app'}
              </p>
              {booking.contact_number && (
                <p className="text-sm text-gray-600">{booking.contact_number}</p>
              )}
            </div>
          </div>

          <div className="flex items-start gap-2">
            <DollarSign className="w-5 h-5 text-red-600 mt-0.5" />
            <div>
              <p className="text-sm text-gray-600">Payment Status</p>
              <p className="font-semibold">
                {booking.payment_status === 'held_in_escrow' && 'üí∞ Held in Escrow'}
                {booking.payment_status === 'released_to_owner' && '‚úÖ Released to Owner'}
                {booking.payment_status === 'refunded' && '‚Ü©Ô∏è Refunded'}
              </p>
            </div>
          </div>
        </div>

        {isOwner && booking.status === 'confirmed' && (
          <div className="flex gap-3 pt-4 border-t">
            <Button
              onClick={() => handleStatusUpdate(booking.id, 'picked_up')}
              className="flex-1 bg-blue-600 hover:bg-blue-700"
              disabled={updateBookingMutation.isPending}
            >
              Mark as Picked Up
            </Button>
          </div>
        )}

        {isOwner && booking.status === 'picked_up' && (
          <div className="flex gap-3 pt-4 border-t">
            <Button
              onClick={() => handleStatusUpdate(booking.id, 'returned')}
              className="flex-1 bg-green-600 hover:bg-green-700"
              disabled={updateBookingMutation.isPending}
            >
              <CheckCircle className="w-4 h-4 mr-2" />
              Mark as Returned (Release Payment)
            </Button>
          </div>
        )}

        {!isOwner && booking.status === 'pending' && (
          <div className="flex gap-3 pt-4 border-t">
            <Button
              onClick={() => handleStatusUpdate(booking.id, 'cancelled')}
              variant="destructive"
              className="flex-1"
              disabled={updateBookingMutation.isPending}
            >
              <XCircle className="w-4 h-4 mr-2" />
              Cancel Booking
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  );

  return (
    <div className="max-w-6xl mx-auto px-6 py-8 bg-black min-h-screen">
      <div className="mb-8">
        <h1 className="text-3xl md:text-4xl font-bold text-white mb-2">
          My Bookings
        </h1>
        <p className="text-gray-400">
          Manage your rentals and equipment bookings
        </p>
      </div>

      <Tabs defaultValue="rentals" className="space-y-6">
        <TabsList className="grid w-full max-w-md grid-cols-2 bg-white border-2 border-red-200">
          <TabsTrigger
            value="rentals"
            className="data-[state=active]:bg-gradient-to-r data-[state=active]:from-red-600 data-[state=active]:to-blue-600 data-[state=active]:text-white"
          >
            My Rentals ({myRentals.length})
          </TabsTrigger>
          <TabsTrigger
            value="listings"
            className="data-[state=active]:bg-gradient-to-r data-[state=active]:from-red-600 data-[state=active]:to-blue-600 data-[state=active]:text-white"
          >
            My Equipment ({myListings.length})
          </TabsTrigger>
        </TabsList>

        <TabsContent value="rentals" className="space-y-6">
          {isLoading ? (
            Array(3).fill(0).map((_, i) => (
              <Skeleton key={i} className="h-64 w-full" />
            ))
          ) : myRentals.length === 0 ? (
            <Card className="p-12 text-center border-2 border-red-200">
              <Calendar className="w-16 h-16 mx-auto mb-4 text-red-600" />
              <h3 className="text-xl font-semibold mb-2">No rentals yet</h3>
              <p className="text-gray-600 mb-6">Start browsing equipment to make your first booking</p>
              <Button
                onClick={() => window.location.href = createPageUrl("Home")}
                className="bg-gradient-to-r from-red-600 to-blue-600 hover:from-red-700 hover:to-blue-700"
              >
                Browse Equipment
              </Button>
            </Card>
          ) : (
            myRentals.map(booking => (
              <BookingCard key={booking.id} booking={booking} isOwner={false} />
            ))
          )}
        </TabsContent>

        <TabsContent value="listings" className="space-y-6">
          {isLoading ? (
            Array(3).fill(0).map((_, i) => (
              <Skeleton key={i} className="h-64 w-full" />
            ))
          ) : myListings.length === 0 ? (
            <Card className="p-12 text-center border-2 border-red-200">
              <Package className="w-16 h-16 mx-auto mb-4 text-red-600" />
              <h3 className="text-xl font-semibold mb-2">No bookings for your equipment</h3>
              <p className="text-gray-600 mb-6">List your equipment to start earning</p>
              <Button
                onClick={() => window.location.href = createPageUrl("ListEquipment")}
                className="bg-gradient-to-r from-red-600 to-blue-600 hover:from-red-700 hover:to-blue-700"
              >
                List Equipment
              </Button>
            </Card>
          ) : (
            myListings.map(booking => (
              <BookingCard key={booking.id} booking={booking} isOwner={true} />
            ))
          )}
        </TabsContent>
      </Tabs>
    </div>
  );
}

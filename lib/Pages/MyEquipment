import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Plus, Edit, Trash2, MapPin, Calendar } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Calendar as CalendarComponent } from "@/components/ui/calendar";
import { Label } from "@/components/ui/label";
import { format, differenceInDays } from "date-fns";
import axios from "axios";

export default function MyEquipment() {
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const [blockingEquipment, setBlockingEquipment] = useState(null);
  const [startDate, setStartDate] = useState(null);
  const [endDate, setEndDate] = useState(null);

  // Get current user
  const { data: user } = useQuery({
    queryKey: ["currentUser"],
    queryFn: async () => {
      const res = await axios.get("/api/me");
      return res.data;
    },
  });

  // Fetch user's equipment
  const { data: equipment = [], isLoading } = useQuery({
    queryKey: ["myEquipment", user?.email],
    queryFn: async () => {
      const res = await axios.get(`/api/equipment?created_by=${user.email}`);
      return res.data;
    },
    enabled: !!user,
  });

  // Delete equipment
  const deleteEquipmentMutation = useMutation({
    mutationFn: async (id) => {
      await axios.delete(`/api/equipment/${id}`);
    },
    onSuccess: () => {
      queryClient.invalidateQueries(["myEquipment"]);
      queryClient.invalidateQueries(["equipment"]);
    },
  });

  // Block equipment dates
  const blockEquipmentMutation = useMutation({
    mutationFn: async ({ equipmentId, startDate, endDate }) => {
      await axios.post("/api/bookings", {
        equipment_id: equipmentId,
        equipment_name: blockingEquipment.name,
        renter_email: user.email,
        renter_name: "Owner Block",
        owner_email: user.email,
        start_date: format(startDate, "yyyy-MM-dd"),
        end_date: format(endDate, "yyyy-MM-dd"),
        total_days: differenceInDays(endDate, startDate) + 1,
        total_amount: 0,
        status: "confirmed",
        payment_status: "released_to_owner",
        pickup_location: blockingEquipment.location,
        pickup_address: blockingEquipment.address,
        contact_number: blockingEquipment.contact_number,
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries(["bookings"]);
      setBlockingEquipment(null);
      setStartDate(null);
      setEndDate(null);
    },
  });

  const handleBlockDates = () => {
    if (!startDate || !endDate) return;
    blockEquipmentMutation.mutate({
      equipmentId: blockingEquipment.id,
      startDate,
      endDate,
    });
  };

  const categoryColors = {
    speakers: "bg-blue-500 text-white",
    dj_equipment: "bg-red-500 text-white",
    microphones: "bg-pink-500 text-white",
    lighting: "bg-yellow-500 text-white",
    instruments: "bg-green-500 text-white",
    amplifiers: "bg-orange-500 text-white",
    mixers: "bg-indigo-500 text-white",
    other: "bg-gray-500 text-white",
  };

  if (!user) {
    return (
      <div className="max-w-4xl mx-auto px-6 py-16 text-center bg-black min-h-screen">
        <h2 className="text-2xl font-bold mb-4 text-white">
          Please login to view your equipment
        </h2>
        <Button
          onClick={() => (window.location.href = "/login")}
          className="bg-cyan-400 text-black hover:bg-cyan-300"
        >
          Login
        </Button>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-6 py-8 bg-black min-h-screen">
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-3xl md:text-4xl font-bold text-white mb-2">
            My Equipment
          </h1>
          <p className="text-gray-400">Manage your listed music equipment</p>
        </div>
        <Button
          onClick={() => navigate(createPageUrl("ListEquipment"))}
          className="bg-cyan-400 text-black hover:bg-cyan-300"
        >
          <Plus className="w-4 h-4 mr-2" />
          Add Equipment
        </Button>
      </div>

      {isLoading ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {Array(6)
            .fill(0)
            .map((_, i) => (
              <Skeleton key={i} className="h-96 bg-gray-800" />
            ))}
        </div>
      ) : equipment.length === 0 ? (
        <Card className="p-12 text-center border-0 bg-gray-900 rounded-3xl">
          <div className="w-24 h-24 mx-auto mb-6 bg-gray-800 rounded-full flex items-center justify-center">
            <Plus className="w-12 h-12 text-cyan-400" />
          </div>
          <h3 className="text-2xl font-semibold mb-2 text-white">
            No equipment listed yet
          </h3>
          <p className="text-gray-400 mb-6">
            Start listing your music equipment to earn money
          </p>
          <Button
            onClick={() => navigate(createPageUrl("ListEquipment"))}
            className="bg-cyan-400 text-black hover:bg-cyan-300"
          >
            <Plus className="w-4 h-4 mr-2" />
            List Your First Item
          </Button>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {equipment.map((item) => (
            <Card
              key={item.id}
              className="overflow-hidden hover:shadow-lg transition-shadow border-0 bg-gray-200 rounded-3xl"
            >
              <div className="relative h-48 bg-gray-300 overflow-hidden">
                {item.image_url ? (
                  <img
                    src={item.image_url}
                    alt={item.name}
                    className="w-full h-full object-cover"
                  />
                ) : (
                  <div className="w-full h-full flex items-center justify-center">
                    <span className="text-6xl opacity-30">ðŸŽµ</span>
                  </div>
                )}
                <div className="absolute top-3 left-3">
                  <Badge
                    className={`${categoryColors[item.category]} border-0 shadow-lg`}
                  >
                    {item.category?.replace(/_/g, " ")}
                  </Badge>
                </div>
                <div className="absolute top-3 right-3">
                  <Badge
                    className={
                      item.status === "available"
                        ? "bg-green-600 text-white"
                        : "bg-red-600 text-white"
                    }
                  >
                    {item.status}
                  </Badge>
                </div>
              </div>

              <CardContent className="p-4">
                <h3 className="font-bold text-lg text-gray-900 mb-2 line-clamp-1">
                  {item.name}
                </h3>
                <p className="text-sm text-gray-600 mb-3 line-clamp-2">
                  {item.description || "No description"}
                </p>

                <div className="flex items-center gap-2 text-sm text-gray-500 mb-3">
                  <MapPin className="w-4 h-4" />
                  <span className="line-clamp-1">{item.location}</span>
                </div>

                <div className="text-2xl font-bold text-gray-900">
                  R{item.price_per_day}
                  <span className="text-sm text-gray-500 font-normal"> / day</span>
                </div>
              </CardContent>

              <CardFooter className="p-4 pt-0 flex gap-2 flex-wrap">
                <Button
                  variant="outline"
                  size="sm"
                  className="flex-1 border-2 border-gray-400 hover:bg-gray-300"
                  onClick={() =>
                    navigate(createPageUrl("EquipmentDetails") + `?id=${item.id}`)
                  }
                >
                  <Edit className="w-4 h-4 mr-2" />
                  View
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  className="flex-1 border-2 border-cyan-400 hover:bg-cyan-400 hover:text-black"
                  onClick={() => setBlockingEquipment(item)}
                >
                  <Calendar className="w-4 h-4 mr-2" />
                  Block
                </Button>
                <Button
                  variant="destructive"
                  size="sm"
                  onClick={() => {
                    if (confirm("Are you sure you want to delete this equipment?")) {
                      deleteEquipmentMutation.mutate(item.id);
                    }
                  }}
                  disabled={deleteEquipmentMutation.isPending}
                >
                  <Trash2 className="w-4 h-4" />
                </Button>
              </CardFooter>
            </Card>
          ))}
        </div>
      )}

      {/* Block dates dialog */}
      <Dialog
        open={!!blockingEquipment}
        onOpenChange={() => {
          setBlockingEquipment(null);
          setStartDate(null);
          setEndDate(null);
        }}
      >
        <DialogContent className="bg-gray-900 border-gray-700 text-white">
          <DialogHeader>
            <DialogTitle>Block Equipment Dates</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <p className="text-sm text-gray-400">
              Select dates when your equipment won't be available for rental
            </p>
            <div>
              <Label className="text-white mb-2 block">Start Date</Label>
              <CalendarComponent
                mode="single"
                selected={startDate}
                onSelect={setStartDate}
                disabled={(date) => date < new Date()}
                className="rounded-md border border-gray-700 bg-gray-800 text-white"
              />
            </div>
            <div>
              <Label className="text-white mb-2 block">End Date</Label>
              <CalendarComponent
                mode="single"
                selected={endDate}
                onSelect={setEndDate}
                disabled={(date) =>
                  date < new Date() || (startDate && date <= startDate)
                }
                className="rounded-md border border-gray-700 bg-gray-800 text-white"
              />
            </div>
          </div>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => {
                setBlockingEquipment(null);
                setStartDate(null);
                setEndDate(null);
              }}
              className="border-gray-700 text-white hover:bg-gray-800"
            >
              Cancel
            </Button>
            <Button
              onClick={handleBlockDates}
              disabled={
                !startDate || !endDate || blockEquipmentMutation.isPending
              }
              className="bg-cyan-400 text-black hover:bg-cyan-300"
            >
              Block Dates
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
